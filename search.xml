<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Flink窗口的应用</title>
    <url>/2023/06/10/Flink%E7%AA%97%E5%8F%A3%E7%9A%84%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<blockquote>
<p>本文整理自：Apache Flink Contributor、OPPO大数据平台研发负责人张俊老师在Flink实时数仓篇的分享</p>
</blockquote>
<h1 id="Window-应用场景"><a href="#Window-应用场景" class="headerlink" title="Window 应用场景"></a>Window 应用场景</h1><p><img src="https://gitee.com/xmzhou00/blog-pic/raw/master/img/image-20230610204417554.png" alt="image-20230610204417554"></p>
<ul>
<li>聚合统计：比如从Kafka中读取数据，根据不同的维度做一分钟或几分钟的聚合计算，然后写入到外部存储。</li>
<li>记录合并：对可合并的原始数据进行合并。例如：用户的行为数据，对单个用户来说，可以考虑在一定的窗口范围内进行合并，再写入到下游系统，比如ES，这样也可以降低下游的写入压力。</li>
<li>双流join：针对join场景，如果进行全量join，Flink会把数据记录在状态里，并且不会清除，导致成本开销非常大。所以，通常这种情况下，需要用窗口join。</li>
</ul>
<h1 id="Window-抽象概念"><a href="#Window-抽象概念" class="headerlink" title="Window 抽象概念"></a>Window 抽象概念</h1><p><img src="https://gitee.com/xmzhou00/blog-pic/raw/master/img/image-20230610205648588.png" alt="image-20230610205648588"></p>
<ul>
<li>TimestampAssigner：如果时间语义是Event-Time，需要通过TimestampAssigner来告诉Flink，数据的哪一部分来当作Event-Time。</li>
<li>KeySelector：Key选择器，用来告诉Flink做聚合统计的维度。</li>
<li>WindowAssigner：窗口分配器，用来确定到来的数据被划分到哪个窗口。</li>
<li>State：存储窗口内的元素，如果有AggregateFunction，那么存储的就是增量聚合的中间状态。</li>
<li>AggregateFunction（可选）：增量聚合函数，适用于可以增量聚合的逻辑，减轻State的压力。</li>
<li>Trigger：窗口触发器，用来确定何时触发窗口的计算。</li>
<li>Evictor（可选）：驱逐器，用于在窗口函数计算之前（后）对满足其驱逐条件的数据进行过滤。</li>
<li>WindowFunction：窗口函数，对窗口的数据进行计算。</li>
<li>Collector：将窗口的计算结果发送到下游。</li>
</ul>
<p>上图中，红色的部分都是可以自定义的模块，通过自定义这些模块的组合，可以实现更高级的窗口应用。同时Flink也提供了一些内置的实现。</p>
<h1 id="Window-编程接口"><a href="#Window-编程接口" class="headerlink" title="Window 编程接口"></a>Window 编程接口</h1><p>keyed Windows</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">stream</span><br><span class="line">       .keyBy(...)               &lt;-  仅 keyed 窗口需要</span><br><span class="line">       .window(...)              &lt;-  必填项：<span class="string">&quot;assigner&quot;</span></span><br><span class="line">      [.trigger(...)]            &lt;-  可选项：<span class="string">&quot;trigger&quot;</span> (省略则使用默认 trigger)</span><br><span class="line">      [.evictor(...)]            &lt;-  可选项：<span class="string">&quot;evictor&quot;</span> (省略则不使用 evictor)</span><br><span class="line">      [.allowedLateness(...)]    &lt;-  可选项：<span class="string">&quot;lateness&quot;</span> (省略则为 <span class="number">0</span>)</span><br><span class="line">      [.sideOutputLateData(...)] &lt;-  可选项：<span class="string">&quot;output tag&quot;</span> (省略则不对迟到数据使用 side output)</span><br><span class="line">       .reduce/aggregate/apply()      &lt;-  必填项：<span class="string">&quot;function&quot;</span></span><br><span class="line">      [.getSideOutput(...)]      &lt;-  可选项：<span class="string">&quot;output tag&quot;</span></span><br></pre></td></tr></table></figure>

<p>Non-keyed Windows</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">stream</span><br><span class="line">       .windowAll(...)           &lt;-  必填项：<span class="string">&quot;assigner&quot;</span></span><br><span class="line">      [.trigger(...)]            &lt;-  可选项：<span class="string">&quot;trigger&quot;</span> (<span class="keyword">else</span> <span class="keyword">default</span> trigger)</span><br><span class="line">      [.evictor(...)]            &lt;-  可选项：<span class="string">&quot;evictor&quot;</span> (<span class="keyword">else</span> no evictor)</span><br><span class="line">      [.allowedLateness(...)]    &lt;-  可选项：<span class="string">&quot;lateness&quot;</span> (<span class="keyword">else</span> zero)</span><br><span class="line">      [.sideOutputLateData(...)] &lt;-  可选项：<span class="string">&quot;output tag&quot;</span> (<span class="keyword">else</span> no side output <span class="keyword">for</span> late data)</span><br><span class="line">       .reduce/aggregate/apply()      &lt;-  必填项：<span class="string">&quot;function&quot;</span></span><br><span class="line">      [.getSideOutput(...)]      &lt;-  可选项：<span class="string">&quot;output tag&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="Window-Assigner"><a href="#Window-Assigner" class="headerlink" title="Window Assigner"></a>Window Assigner</h2><p><img src="https://gitee.com/xmzhou00/blog-pic/raw/master/img/image-20230610211444506.png" alt="image-20230610211444506"></p>
<p>总结一下主要有三类窗口：</p>
<ul>
<li>Time Window</li>
<li>Count Window</li>
<li>Custom Window</li>
</ul>
<h2 id="Window-Trigger"><a href="#Window-Trigger" class="headerlink" title="Window Trigger"></a>Window Trigger</h2><p>Trigger用来确定窗口什么时候触发计算。</p>
<p>Flink内置了一些Trigger：</p>
<table>
<thead>
<tr>
<th>内置Trigger</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>ProcessingTrigger</td>
<td>一次触发，machine time大于窗口结束时间触发</td>
</tr>
<tr>
<td>EventTimeTrigger</td>
<td>一次触发，watermark大于窗口结束时间触发</td>
</tr>
<tr>
<td>ContinuousProcessingTimeTrigger</td>
<td>多次触发，基于processing time的固定时间间隔</td>
</tr>
<tr>
<td>ContinuourEventTimeTrigger</td>
<td>多次触发，基于event time的固定时间间隔</td>
</tr>
<tr>
<td>CountTrigger</td>
<td>多次触发，基于element的固定条数</td>
</tr>
<tr>
<td>DeltaTrigger</td>
<td>多次触发，当前element与上一次触发trigger的element做delta计算，超过threshold时触发</td>
</tr>
<tr>
<td>PurgingTrigger</td>
<td>trigger wrapper，当nested trigger触发时，额外清理从窗口当前的中间状态</td>
</tr>
</tbody></table>
<h3 id="Trigger示例"><a href="#Trigger示例" class="headerlink" title="Trigger示例"></a>Trigger示例</h3><p><img src="https://gitee.com/xmzhou00/blog-pic/raw/master/img/image-20230610213254767.png" alt="image-20230610213254767"></p>
<p>如上图，定义一个五分钟基于Event-Time的Window，定义一个两分钟触发一次的Trigger，有四条数据事件事件分别是20:01，20:02，20:03，20:04，对应的值分别是1，2，3，4。window的计算逻辑是对值进行sum计算。初始状态，State和Result中的值都是0。</p>
<p><img src="https://gitee.com/xmzhou00/blog-pic/raw/master/img/image-20230610213737445.png" alt="image-20230610213737445"></p>
<p>当第一条数据在20:01时进入窗口，State的值变为1，此时还没到达Trigger的触发时机。</p>
<p><img src="https://gitee.com/xmzhou00/blog-pic/raw/master/img/image-20230610213844038.png" alt="image-20230610213844038"></p>
<p>第二条数据进入window，State中的值变为1+2&#x3D;3，此时满足Trigger的触发机制，所以Result输出结果为3。</p>
<p><img src="https://gitee.com/xmzhou00/blog-pic/raw/master/img/image-20230610214055540.png" alt="image-20230610214055540"></p>
<p>第三条数据进入window，State值变为6，此时不能触发Trigger，没有结果输出。</p>
<p><img src="https://gitee.com/xmzhou00/blog-pic/raw/master/img/image-20230610214132542.png" alt="image-20230610214132542"></p>
<p>第四条数据进入window，State值变为8，此时Trigger又可以触发窗口计算，输出结果为8。如果把结果输出到支持update的存储，比如MySQL，那么结果就从3更新成8。</p>
<p>问题：如果外部存储只支持append呢？</p>
<p><img src="https://gitee.com/xmzhou00/blog-pic/raw/master/img/image-20230610214353949.png" alt="image-20230610214353949"></p>
<p>如果Result不支持update操作，只能进行append，则会输出两条记录，在此基础上再做计算就会引起错误。</p>
<p>使用PurgingTrigger解决上述问题。</p>
<h3 id="PurgingTrigger的应用"><a href="#PurgingTrigger的应用" class="headerlink" title="PurgingTrigger的应用"></a>PurgingTrigger的应用</h3><p><img src="https://gitee.com/xmzhou00/blog-pic/raw/master/img/image-20230610214534278.png" alt="image-20230610214534278"></p>
<p>还是和前面案例类似，不同的是，此时将触发器包装了一个PurgingTrigger。PurigingTrigger的作用是再Trigger触发窗口计算逻辑后，将窗口内的State清除。</p>
<p>流程如下：</p>
<p><img src="https://gitee.com/xmzhou00/blog-pic/raw/master/img/image-20230610214800074.png" alt="image-20230610214800074"></p>
<p>前两条数据到达窗口，state变为3，同时触发窗口计算，并输出结果。</p>
<p><img src="https://gitee.com/xmzhou00/blog-pic/raw/master/img/image-20230610214846942.png" alt="image-20230610214846942"></p>
<p>由于包装了PurgingTrigger，窗口中的State会被清理掉。</p>
<p>这样针对于下游只能Append的系统，使用PurgingTrigger，外部存储只需要再进行sum计算，就能得到最终的正确结果。</p>
<h3 id="Delta-Trigger"><a href="#Delta-Trigger" class="headerlink" title="Delta Trigger"></a>Delta Trigger</h3><p><img src="https://gitee.com/xmzhou00/blog-pic/raw/master/img/image-20230610215125246.png" alt="image-20230610215125246"></p>
<p>首先要考虑的时如何来划分窗口，它既不是一个时间的窗口，也不是一个基于数量的窗口。用创痛的窗口实现比较困难，这种情况下可以考虑使用DeltaTrigger来实现。</p>
<p>案例代码链接：<a href="https://github.com/xmzhou00/flink-learn/blob/main/src/main/java/com/flinkcore/window/DeltaTriggerDemo.java">DeltaTrigger</a></p>
<ul>
<li>思考点</li>
</ul>
<p>上述案例我们通过GlobalWindow和DeltaTrigger来实现自定义的Window Assigner的功能。对于一些复杂的窗口，我们也可以定义WindowAssigner，但是实现起来不一定简单，倒不如使用GlobalWindow+Trigger来达到同样的效果。</p>
<p>Flink内置的CountWindow的实现，也是基于GlobalWindow + Trigger来实现的。</p>
<p><img src="https://gitee.com/xmzhou00/blog-pic/raw/master/img/image-20230610215841460.png" alt="image-20230610215841460"></p>
<h2 id="Window-Evictor"><a href="#Window-Evictor" class="headerlink" title="Window Evictor"></a>Window Evictor</h2><p>Flink内置了一些Evictor</p>
<table>
<thead>
<tr>
<th>内置Evictor</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>CountEvictor</td>
<td>窗口计算时，只保留最近N条element</td>
</tr>
<tr>
<td>TimeEvictor</td>
<td>窗口计算时，只保留最近N段时间范围内的element</td>
</tr>
<tr>
<td>DeltaEvictor</td>
<td>窗口计算时，最新的一条element与其他element做delta计算，只保留在delta在threshold内的element</td>
</tr>
</tbody></table>
<h3 id="TImeEvicot的应用"><a href="#TImeEvicot的应用" class="headerlink" title="TImeEvicot的应用"></a>TImeEvicot的应用</h3><p><img src="https://gitee.com/xmzhou00/blog-pic/raw/master/img/image-20230610220226175.png" alt="image-20230610220226175"></p>
<p>实现上只需要在前面的基础上增加Evictor，过滤掉最后15分钟前的数据。</p>
<p><img src="https://gitee.com/xmzhou00/blog-pic/raw/master/img/image-20230610220329978.png" alt="image-20230610220329978"></p>
<h2 id="Window-Function"><a href="#Window-Function" class="headerlink" title="Window Function"></a>Window Function</h2><p>Flink内置的WindowFunction有两类，一种是AggregateFunction，适用于增量计算的场景，每到来一条数据就做一次聚合，状态中存储的是最新的计算逻辑值。</p>
<ul>
<li>优点：增量聚合，状态小。</li>
<li>缺点：输出只有一个聚合值，场景有限。</li>
</ul>
<p>另外一种是ProcessingWindowFunction，做全量计算，数据全部都存在State中，当窗口触发时才会调用计算逻辑。</p>
<p>优点：可以获取到窗口内的所有数据，实现逻辑灵活，可以获取聚合的key和窗口的相关信息。</p>
<p>缺点：State压力大。</p>
<p>增量计算和全量计算可以一起使用，通过AggregateFunction做增量聚合，减少中间状态的压力。通过ProcessWindowFunction来输出我们想要的信息，比如Key和窗口等信息。</p>
]]></content>
      <categories>
        <category>Flink</category>
      </categories>
      <tags>
        <tag>Flink</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL MVCC机制</title>
    <url>/2021/06/08/MySQL-MVCC%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/05/03/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
</search>
